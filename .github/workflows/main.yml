name: Build

on:
  push:
    branches:
      - main
    tags:
      - v*

env:
  AIRSDK_VERSION: air-50.2-with-flex-4.16
  RUBY_VERSION: 3.2.2
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  client-data:
    name: Client Data
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/unlightcloud/castle
      options: --user root
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_USER: unlight
          MYSQL_PASSWORD: unlight
          MYSQL_DATABASE: unlight_db
          MYSQL_ROOT_PASSWORD: unlight
        ports:
          - 3306:3306
        options: --health-cmd "mysqladmin ping" --health-interval 10s --health-timeout 5s --health-retries 10
      memcached:
        image: memcached:alpine
        ports:
          - 11211:11211
    steps:
      - run: cd /opt/unlight && bundle exec rake db:migrate
        env:
          MEMCACHED_HOST: "memcached:11211"
          DATABASE_URL: "mysql2://unlight:unlight@mysql:3306/unlight_db?encoding=utf8"
      - run: cd /opt/unlight && bundle exec rake data:import
        env:
          MEMCACHED_HOST: "memcached:11211"
          DATABASE_URL: "mysql2://unlight:unlight@mysql:3306/unlight_db?encoding=utf8"
      - run: cd /opt/unlight && bundle exec rake data:generate_client_data
        env:
          MEMCACHED_HOST: "memcached:11211"
          DATABASE_URL: "mysql2://unlight:unlight@mysql:3306/unlight_db?encoding=utf8"
      - run: mkdir -p tmp/export
      - run: cp -r /opt/unlight/tmp/export/* tmp/export
      - name: Upload Client Data
        uses: actions/upload-artifact@v4
        with:
          name: client-data
          path: tmp/export
  generate:
    name: Generate
    runs-on: ubuntu-latest
    needs: client-data
    steps:
      - uses: actions/checkout@v4
      - name: Download Client Data
        uses: actions/download-artifact@v4
        with:
          name: client-data
          path: tmp/export
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
      - name: Constant Data
        run: ruby scripts/create_const_data.rb
      - name: Font Loader
        run: ruby scripts/create_font_loader.rb
      - name: Refresh Version
        run: ruby scripts/refresh_version.rb
      - name: Upload Constant Data
        uses: actions/upload-artifact@v4
        with:
          name: constant-data
          path: src/model/utils/ConstData.as
      - name: Upload Font Loader
        uses: actions/upload-artifact@v4
        with:
          name: font-loader
          path: src/FontLoader.as
      - name: Upload Version
        uses: actions/upload-artifact@v4
        with:
          name: version
          path: lib/Version.as
  package:
    name: Package
    needs: generate
    strategy:
      matrix:
        os: [macos, windows]
    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '21'
          check-latest: true
      - id: airsdk-cache
        name: Cache AIRSDK
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-AIRSDK-${{ env.AIRSDK_VERSION }}
          path: AIRSDK.zip
      - name: Download AIRSDK
        if: ${{ steps.airsdk-cache.outputs.cache-hit != 'true' }}
        run: |
          curl -L ${{ secrets.AIRSDK_HOST }}/${{ matrix.os }}/${{ env.AIRSDK_VERSION }}.zip -o AIRSDK.zip
      - name: Unzip AIRSDK (Unix)
        if: ${{ runner.os != 'Windows' }}
        run: |
          unzip AIRSDK.zip
          echo "SDK_HOME=./${{ env.AIRSDK_VERSION }}" >> "$GITHUB_ENV"
      - name: Unzip AIRSDK (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: |
          7z x AIRSDK.zip
          echo "SDK_HOME=./${{ env.AIRSDK_VERSION }}" >> "$env:GITHUB_ENV"
      - name: Download Constant Data
        uses: actions/download-artifact@v4
        with:
          name: constant-data
          path: src/model/utils/
      - name: Download Font Loader
        uses: actions/download-artifact@v4
        with:
          name: font-loader
          path: src/
      - name: Download Version
        uses: actions/download-artifact@v4
        with:
          name: version
          path: lib/
      - name: Build
        run: |
          ant -DCERTIFICATE_PASSWORD=${{ secrets.CERTIFICATE_PASSWORD }} -DSENTRY_DSN=${{ secrets.SENTRY_DSN }} -d package
      # Package
      - name: Sign (macOS)
        if: ${{ runner.os == 'macOS' }}
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_SIGNING_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_SIGNING_PASSWORD }}
        run: |
          echo ${MACOS_CERTIFICATE} | base64 --decode > certificate.p12
          security create-keychain -p ${{ secrets.KEYCHAIN_PASSWORD }} build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p ${{ secrets.KEYCHAIN_PASSWORD }} build.keychain
          security import certificate.p12 -k build.keychain -P ${MACOS_CERTIFICATE_PWD} -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k ${{ secrets.KEYCHAIN_PASSWORD }} build.keychain
          codesign --force -s ${{ secrets.MACOS_SIGNING_CERTIFICATE_ID }} "bin/Unlight.app" -v
      - name: Install create-dmg
        if: ${{ runner.os == 'macOS' }}
        run: |
          brew install create-dmg
      - name: Prepare .dmg contents
        if: ${{ runner.os == 'macOS' }}
        run: |
          mkdir dmg
          mkdir dist
          cp -r "bin/Unlight.app" dmg/
      - name: Archive (macOS)
        if: ${{ runner.os == 'macOS' }}
        run: >
          create-dmg
          --volname "Unlight Dekstop"
          --volicon "bin/Unlight.app/Contents/Resources/Icon.icns"
          --window-pos 200 100
          --window-size 800 400
          --icon-size 100
          --icon "Unlight.app" 200 190
          --hide-extension "Unlight.app"
          --app-drop-link 600 185
          "dist/Unlight-${{ runner.os }}.dmg" dmg/
      - name: Archive (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: |
          mkdir dist
          7z a -tzip dist/Unlight-${{ runner.os }}.zip bin/Unlight.app
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: Unlight-${{ runner.os }}
          path: dist/
  release:
    name: Release
    needs: package
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Download
        uses: actions/download-artifact@v4
        with:
          pattern: Unlight-*
          path: dist
      - name: Upload
        uses: softprops/action-gh-release@v2
        with:
          files: dist/Unlight-*/*
          generate_release_notes: true
